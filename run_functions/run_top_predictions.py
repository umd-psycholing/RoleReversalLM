# -*- coding: utf-8 -*-
"""run_top_predictions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_f0AIji3eKX2b6jZadsIZP7rfsyCOoUK
"""

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv(f'/content/drive/MyDrive/LLM_role-reversal/files/df_comb.csv')

import json
import pandas as pd
from transformers import AutoTokenizer, AutoModelForCausalLM, AutoModelForMaskedLM
from top_predictions import get_top_predictions, check_target_in_predictions, check_target_is_top_prediction

model_names = [
    'gpt2',
    'gpt2-medium',
    'bert-large-uncased',
    'roberta-large'
]

def main():
    for model_name in model_names:
        # Load model and tokenizer
        if 'gpt' in model_name:
            tokenizer = AutoTokenizer.from_pretrained(model_name)
            model = AutoModelForCausalLM.from_pretrained(model_name)
            model_type = 'gpt'
        elif 'bert' in model_name or 'roberta' in model_name:
            tokenizer = AutoTokenizer.from_pretrained(model_name)
            model = AutoModelForMaskedLM.from_pretrained(model_name)
            model_type = 'bert'
        else:
            raise ValueError("Model name must contain 'gpt' or 'bert' to determine the model type.")

        print(f"Loaded {model_name}")

        # Example DataFrame
        data = {
            'context_had': ["This is a test sentence.", "Another test sentence here."],
            'target': ["test", "sentence"]
        }
        df = pd.DataFrame(data)

        top_prediction_results = run_top_predictions(df, model_name, model_type)
        write_results(top_prediction_results, f'/content/drive/MyDrive/LLM_role-reversal/results/toppred_{model_name}.json')

def run_top_predictions(df, model_name, model_type):
    # Get top predictions and check if target word is in the top predictions
    df['top_pred_5'] = df.apply(lambda row: get_top_predictions(row['context_had'], row['target'], model_type), axis=1)
    df['in_top_pred_5'] = df.apply(lambda row: check_target_in_predictions(row['top_pred_5'], row['target']), axis=1)
    df['in_top_pred_1'] = df.apply(lambda row: check_target_is_top_prediction(row['top_pred_5'], row['target']), axis=1)
    df['model_name'] = model_name
    return df

def write_results(top_prediction_results, output_path):
    print(f"Finished getting top predictions, writing JSON of results to {output_path}")
    with open(output_path, 'w') as fp:
        json.dump(top_prediction_results.to_dict(orient='records'), fp)

if __name__ == "__main__":
    main()

"""# Plot top prediction results"""

model_name = 'gpt2'
df_toppred1 = pd.read_csv(f'/content/drive/MyDrive/LLM_role-reversal/files/toppred_{model_name}.csv')
model_name = 'gpt2-medium'
df_toppred2 = pd.read_csv(f'/content/drive/MyDrive/LLM_role-reversal/files/toppred_{model_name}.csv')
model_name = 'gpt2-large'
df_toppred3 = pd.read_csv(f'/content/drive/MyDrive/LLM_role-reversal/files/toppred_{model_name}.csv')
model_name = 'bert-base-uncased'
df_toppred4 = pd.read_csv(f'/content/drive/MyDrive/LLM_role-reversal/files/toppred_{model_name}.csv')
model_name = 'bert-large-uncased'
df_toppred5 = pd.read_csv(f'/content/drive/MyDrive/LLM_role-reversal/files/toppred_{model_name}.csv')
model_name = 'roberta-base'
df_toppred6 = pd.read_csv(f'/content/drive/MyDrive/LLM_role-reversal/files/toppred_{model_name}.csv')
model_name = 'roberta-large'
df_toppred7 = pd.read_csv(f'/content/drive/MyDrive/LLM_role-reversal/files/toppred_{model_name}.csv')

df_toppred_comb = pd.concat([df_toppred1,df_toppred2,df_toppred3,df_toppred4,df_toppred5,df_toppred6,df_toppred7], ignore_index=True).drop_duplicates()
df_toppred_comb.loc[(df_toppred_comb['condition'] == 'canonical')|(df_toppred_comb['condition'] == 'alt_canonical')|(df_toppred_comb['condition'] == 'high-cloze'), 'plausibility'] = 'plausible'
df_toppred_comb.loc[(df_toppred_comb['condition'] == 'reversed')|(df_toppred_comb['condition'] == 'alt_reversed')|(df_toppred_comb['condition'] == 'low-cloze'), 'plausibility'] = 'implausible'

df_toppred_comb.loc[(df_toppred_comb['exp'] == 'WY')&(df_toppred_comb['type'] == 'reversal'),'experiment'] = 'CSLP_role'
df_toppred_comb.loc[(df_toppred_comb['exp'] == 'WY')&(df_toppred_comb['type'] == 'substitution'),'experiment'] = 'CSLP_sub'

df_toppred_comb.loc[(df_toppred_comb['exp'] == 'LE')&(df_toppred_comb['type'] == 'reversal'),'experiment'] = 'ELP_role1'
df_toppred_comb.loc[(df_toppred_comb['exp'] == 'LE')&(df_toppred_comb['type'] == 'alternative'),'experiment'] = 'ELP_role2'

df_toppred_comb.loc[(df_toppred_comb['exp'] == 'KO')&(df_toppred_comb['type'] == 'reversal'),'experiment'] = 'KO_role'
df_toppred_comb.loc[(df_toppred_comb['exp'] == 'KO')&(df_toppred_comb['type'] == 'control'),'experiment'] = 'KO_control'

# Plot proportion in top prediction
g = sns.catplot(
    df_toppred_comb, kind="bar",
    x="model_name", y="in_top_pred_1", col = 'experiment', hue = 'plausibility', errorbar = None
)#.set(ylim=(0, .3))
g.set(xticklabels=["gpt2-s", "gpt2-m", "gpt2-l", "bert-b", "bert-l", "roberta-b", "roberta-l"])
plt.show()

# Plot proportion in top 5 predictions
g = sns.catplot(
    df_toppred_comb, kind="bar",
    x="model_name", y="in_top_pred_5", col = 'experiment', hue = 'plausibility', errorbar = None
)#.set(ylim=(0, .6))
g.set(xticklabels=["gpt2-s", "gpt2-m", "gpt2-l", "bert-b", "bert-l", "roberta-b", "roberta-l"])
plt.show()